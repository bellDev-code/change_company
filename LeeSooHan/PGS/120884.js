// 문제 설명
// 프로그래머스 치킨은 치킨을 시켜먹으면 한 마리당 쿠폰을 한 장 발급합니다. 쿠폰을 열 장 모으면 치킨을 한 마리 서비스로 받을 수 있고, 서비스 치킨에도 쿠폰이 발급됩니다. 시켜먹은 치킨의 수 chicken이 매개변수로 주어질 때 받을 수 있는 최대 서비스 치킨의 수를 return하도록 solution 함수를 완성해주세요.

// 제한사항
// chicken은 정수입니다.
// 0 ≤ chicken ≤ 1,000,000
// 입출력 예
// chicken	result
// 100	11
// 1,081	120
// 입출력 예 설명
// 입출력 예 #1

// 100마리를 주문하면 쿠폰이 100장 발급되므로 서비스 치킨 10마리를 주문할 수 있습니다.
// 10마리를 주문하면 쿠폰이 10장 발급되므로 서비스 치킨 1마리를 주문할 수 있습니다.
// 따라서 10 + 1 = 11 을 return합니다.
// 입출력 예 #2

// 1081마리를 주문하면 쿠폰이 1081장 발급되므로 서비스 치킨 108마리를 주문할 수 있습니다. 그리고 쿠폰이 1장 남습니다.
// 108마리를 주문하면 쿠폰이 108장 발급되므로 서비스 치킨 10마리를 주문할 수 있습니다. 그리고 쿠폰이 8장 남습니다.
// 10마리를 주문하면 쿠폰이 10장 발급되므로 서비스 치킨 1마리를 주문할 수 있습니다.
// 1마리를 주문하면 쿠폰이 1장 발급됩니다.
// 가지고 있는 쿠폰이 총 10장이므로 서비스 치킨 1마리를 추가로 주문할 수 있습니다.
// 따라서 108 + 10 + 1 + 1 = 120 을 return합니다.

// 아래는 첫번째 풀이
// function solution(chicken) {
//   var answer = 0;
//   let coupon = 0;
//   while (true){
//       if(coupon >= 10) {
//           answer += 1
//           coupon -= 10
//           chicken +=1
//       }
// //         치킨 10마리를 먹으면 쿠폰 10개가 생김
//       if(chicken >= 10){
//           chicken -= 10
//           coupon +=10
//       }
//       if(chicken < 10 && coupon < 10 ) {
//           break
//       }
//   }

//   return answer;
// }

// 누적합으로 풀수 있다 생각해서 코드로 구현해보았다. 수식은 수리니의 설명을 듣고 이해
// 1. 몫
// 2. 나머지
// 3. 몫과 나머지가 10이 넘지 않을 때까지 반복
// 아래는 해당 계산식을 구현 한 방법

function solution(chicken) {
  var answer = 0;

  if (chicken < 10) {
    return answer;
  }

  while (true) {
    if (chicken >= 10) {
      let quotient = Math.floor(chicken / 10);
      let remainder = chicken % 10;
      answer = answer + quotient;
      chicken = quotient + remainder;
      if (quotient + remainder < 10) {
        break;
      }
    } else {
      break;
    }
  }

  return answer;
}

// 신박한 답
// function solution(chicken) {
//   return ~~(chicken*0.111111)
// }
// 먼저 chicken * 0.111111은 chicken 값을 0.111111로 곱한 결과를 나타냅니다. 이는 chicken 값을 9로 나눈 것과 동일합니다. 그런데 이 수식 앞에 ~~ 연산자가 사용되었습니다. ~~ 연산자는 비트 연산자인 논리 NOT 연산자를 두 번 사용하여 소수점 아래의 값이 버려지고 정수 부분만 남게 됩니다. 즉, 소수점 이하를 버리고 정수 부분만 반환합니다. 따라서 이 코드는 chicken 값을 9로 나눈 후 소수점 아래 값을 버리고, 정수 부분인 최대 서비스 치킨의 개수를 반환하는 것입니다. 예를 들어, chicken 값이 100일 경우, 100 * 0.111111은 11.1111이 되고, ~~(100 * 0.111111)은 11이 됩니다. 따라서 100마리의 주문에 대해 최대 11마리의 서비스 치킨을 받을 수 있다는 의미입니다.

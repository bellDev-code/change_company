# 평행

# 점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.

# [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
# 주어진 네 개의 점을 두 개씩 이었을 때, 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.

# 제한사항
# dots의 길이 = 4
# dots의 원소는 [x, y] 형태이며 x, y는 정수입니다.
# 0 ≤ x, y ≤ 100
# 서로 다른 두개 이상의 점이 겹치는 경우는 없습니다.
# 두 직선이 겹치는 경우(일치하는 경우)에도 1을 return 해주세요.
# 임의의 두 점을 이은 직선이 x축 또는 y축과 평행한 경우는 주어지지 않습니다.

# 입출력 예
# dots	result
# [[1, 4], [9, 2], [3, 8], [11, 6]]	1
# [[3, 5], [4, 1], [2, 4], [5, 10]]	0

# 입출력 예 설명
# 입출력 예 #1

# 점 [1, 4], [3, 8]을 잇고 [9, 2], [11, 6]를 이으면 두 선분은 평행합니다.

# 입출력 예 #2
# 점을 어떻게 연결해도 평행하지 않습니다.

# 기울기
def gradient(a, b):
    return (a[1] - b[1]) / (a[0] - b[0])

def solution(dots):
    x1, y1 = dots[0][0], dots[0][1]
    x2, y2 = dots[1][0], dots[1][1]
    x3, y3 = dots[2][0], dots[2][1]
    x4, y4 = dots[3][0], dots[3][1]
    
    p1 = (x1, y1)
    p2 = (x2, y2)
    p3 = (x3, y3)
    p4 = (x4, y4)
    
    if gradient(p3, p1) == gradient(p4, p2):
        return 1
    elif gradient(p4, p3) == gradient(p2, p1):
        return 1
    else:
        return 0
    
# 기울기를 사용하지 않고 점과 점 사이의 거리를 계산하여 실행하였을 때, 테스트 케이스 2개가 실패하는 경우가 발생
# 구글 검색 후 기울기 사용하는 방법을 찾고서 해결